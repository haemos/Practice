### 题目
在选举中，第 i 张票是在时间为 times[i] 时投给 persons[i] 的。

现在，我们想要实现下面的查询函数： TopVotedCandidate.q(int t) 将返回在 t 时刻主导选举的候选人的编号。

在 t 时刻投出的选票也将被计入我们的查询之中。在平局的情况下，最近获得投票的候选人将会获胜。

示例：

输入：["TopVotedCandidate","q","q","q","q","q","q"], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]
输出：[null,0,1,1,0,0,1]
解释：
时间为 3，票数分布情况是 [0]，编号为 0 的候选人领先。
时间为 12，票数分布情况是 [0,1,1]，编号为 1 的候选人领先。
时间为 25，票数分布情况是 [0,1,1,0,0,1]，编号为 1 的候选人领先（因为最近的投票结果是平局）。
在时间 15、24 和 8 处继续执行 3 个查询。
 
 示例解释： [0,1,1,0,0,1,0],[0,5,10,15,20,25,30] 表示在0分钟投了0一票，5分钟投了1一票，10分钟投了1一票
 
 ### 思路
 先用一个数组储存在time[i]时得最大值，然后进行二分找查找时间，得出答案
 
 ### 代码
 ~~~ c++
class TopVotedCandidate {
public:
    vector<int> count;
    vector<int> copy;     
    TopVotedCandidate(vector<int>& persons, vector<int>& times) {
        vector<int> cur;
        cur.resize(persons.size(),0);
        count.resize(times.size(),0);
        copy=times;
        int  sign=0;
        for(int i=0;i<persons.size();i++){
            int flag=0,max=0;
            cur[persons[i]]++;
            sign>persons[i]?sign=sign:sign=persons[i];
            for(int j=0;j<sign+1;j++){
                if(max<cur[j]){
                    max=cur[j];
                    flag=j;
                }else if(max==cur[j]){    //相等时选择最新投票的
                    flag=persons[i];
                }
            }
            if(max!=cur[persons[i]]){      //防止00112这种情况导致 flag=2.
                count[i]=count[i-1];   
            }else
                count[i]=flag;
        }
    }
    
    int q(int t) {                    //在时间数组里进行二分查找。
        int left=0,right=copy.size();
        while(left<right){
            int middle=left+(right-left)/2;
            if(copy[middle]>t){
                right=middle;
            }else{
                left=middle+1;
            }
        }
        return count[left-1];
    }
};

/**
 * Your TopVotedCandidate object will be instantiated and called as such:
 * TopVotedCandidate* obj = new TopVotedCandidate(persons, times);
 * int param_1 = obj->q(t);
 */
 ~~~
